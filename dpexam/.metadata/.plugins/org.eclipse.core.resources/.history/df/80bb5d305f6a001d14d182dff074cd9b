package exam;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
public class Main {
	static BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N;
	static int[][] map;
	static int[] person;
	public static void main(String[] args) throws NumberFormatException, IOException {
	N = Integer.parseInt(br.readLine());
	person = new int[N];
	map=new int[N][N];
	st=new StringTokenizer(br.readLine());
	for(int i=0;i<N;i++) {
		person[i]=Integer.parseInt(st.nextToken());
	}
	for(int i=0;i<N;i++) {
		st=new StringTokenizer(br.readLine());
		int a=Integer.parseInt(st.nextToken());
		for(int j=0;j<a;j++) {
			int y = Integer.parseInt(st.nextToken())-1;
			map[i][y]=1;
		}
	}
	v= new boolean[N];
	min = Integer.MAX_VALUE;
	dfs(0);
	System.out.println(min);

	}
	static int min;
	static boolean [] v;
	static void dfs(int idx) {
		if(idx==N) {
			ArrayList<Integer> one = new ArrayList<>();
			ArrayList<Integer> two = new ArrayList<>();
			int sum1=0;
			int sum2=0;
			for(int i=0;i<N;i++) {
				if(v[i]) {
					one.add(i);
					sum1+=person[i];
				}
				else {
					two.add(i);
					sum2+=person[i];
				}
			}
			int res = Math.abs(sum1-sum2);
			if(check(one)&&check(two))
				min = Math.min(min, res);
			return;
		}
		v[idx]=true;
		dfs(idx+1);
		v[idx]=false;
		dfs(idx+1);
		
	}
	static boolean check(ArrayList<Integer> list) {
		int a = list.get(0);
		Queue<Integer> q = new LinkedList<>();
		q.add(a);
		boolean[] v2=new boolean[N];
		v2[a]=true;
		while(!q.isEmpty()) {
			int n = q.poll();
			for(int i=0;i<N;i++) {
				if(map[n][i]==1) {
					v2[i]=true;
					q.add(i);
				}
			}
		}
		for(int i=0;i<list.size();i++) {
			if(!v2[list.get(i)])
				return false;
		}
		return true;
	}
}
